--// SERVICES
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

--// VARIABLES
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local camLockEnabled = false
local camLockKey = Enum.KeyCode.Q
local smoothness = 0.20
local targetPlayer = nil
local predictionAmount = Vector3.new(0.15, 0, 0.15)
local currentMode = "Custom"
local waitingForKey = false
local maxLockAngle = math.rad(30)
local predictionEnabled = true

--// GUI SETUP
local gui = Instance.new("ScreenGui")
gui.Name = "SaltyCamlockPro"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = localPlayer:WaitForChild("PlayerGui")

-- Main Container (Glass Morphism Effect)
local frame = Instance.new("Frame")
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(0, 300, 0, 400) -- Increased height for new features
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
frame.BackgroundTransparency = 0.2
frame.Active = true
frame.Draggable = true
frame.Parent = gui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 12)
corner.Parent = frame

local border = Instance.new("UIStroke")
border.Color = Color3.fromRGB(100, 100, 100)
border.Thickness = 1
border.Transparency = 0.7
border.Parent = frame

local padding = Instance.new("UIPadding")
padding.PaddingTop = UDim.new(0, 15)
padding.PaddingLeft = UDim.new(0, 15)
padding.PaddingRight = UDim.new(0, 15)
padding.PaddingBottom = UDim.new(0, 15)
padding.Parent = frame

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundTransparency = 1
titleBar.Parent = frame

local title = Instance.new("TextLabel")
title.Text = "SALTYNESS HUB  [1.0V]"
title.Size = UDim2.new(1, 0, 1, 0)
title.Font = Enum.Font.GothamSemibold
title.TextSize = 16
title.TextColor3 = Color3.fromRGB(240, 240, 240)
title.BackgroundTransparency = 1
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Divider
local divider = Instance.new("Frame")
divider.Size = UDim2.new(1, 0, 0, 1)
divider.Position = UDim2.new(0, 0, 0, 40)
divider.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
divider.BackgroundTransparency = 0.7
divider.Parent = frame

-- Toggle Button
local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(1, 0, 0, 40)
toggleBtn.Position = UDim2.new(0, 0, 0, 50)
toggleBtn.Text = "CAMLOCK: OFF"
toggleBtn.Font = Enum.Font.GothamMedium
toggleBtn.TextSize = 14
toggleBtn.TextColor3 = Color3.fromRGB(240, 240, 240)
toggleBtn.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
toggleBtn.AutoButtonColor = false
toggleBtn.Parent = frame

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 8)
toggleCorner.Parent = toggleBtn

-- Mode Label
local modeLabel = Instance.new("TextLabel")
modeLabel.Text = "MODE: Custom"
modeLabel.Position = UDim2.new(0, 0, 0, 100)
modeLabel.Size = UDim2.new(1, 0, 0, 20)
modeLabel.Font = Enum.Font.Gotham
modeLabel.TextSize = 13
modeLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
modeLabel.BackgroundTransparency = 1
modeLabel.TextXAlignment = Enum.TextXAlignment.Left
modeLabel.Parent = frame

-- Smoothness Slider
local smoothLabel = Instance.new("TextLabel")
smoothLabel.Text = "SMOOTHNESS: "..string.format("%.2f", smoothness)
smoothLabel.Position = UDim2.new(0, 0, 0, 130)
smoothLabel.Size = UDim2.new(1, 0, 0, 20)
smoothLabel.Font = Enum.Font.Gotham
smoothLabel.TextSize = 13
smoothLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
smoothLabel.BackgroundTransparency = 1
smoothLabel.TextXAlignment = Enum.TextXAlignment.Left
smoothLabel.Parent = frame

local sliderContainer = Instance.new("Frame")
sliderContainer.Size = UDim2.new(1, 0, 0, 24)
sliderContainer.Position = UDim2.new(0, 0, 0, 155)
sliderContainer.BackgroundTransparency = 1
sliderContainer.Parent = frame

local sliderTrack = Instance.new("Frame")
sliderTrack.Size = UDim2.new(1, 0, 0, 4)
sliderTrack.Position = UDim2.new(0, 0, 0.5, 0)
sliderTrack.AnchorPoint = Vector2.new(0, 0.5)
sliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
sliderTrack.Parent = sliderContainer

local sliderCorner = Instance.new("UICorner")
sliderCorner.CornerRadius = UDim.new(1, 0)
sliderCorner.Parent = sliderTrack

local sliderFill = Instance.new("Frame")
sliderFill.Size = UDim2.new(smoothness, 0, 1, 0)
sliderFill.BackgroundColor3 = Color3.fromRGB(80, 180, 255) -- Blue for Custom
sliderFill.Parent = sliderTrack

local sliderCorner2 = Instance.new("UICorner")
sliderCorner2.CornerRadius = UDim.new(1, 0)
sliderCorner2.Parent = sliderFill

local sliderButton = Instance.new("TextButton")
sliderButton.Size = UDim2.new(0, 16, 0, 16)
sliderButton.Position = UDim2.new(smoothness, -8, 0.5, -8)
sliderButton.AnchorPoint = Vector2.new(0, 0.5)
sliderButton.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
sliderButton.Text = ""
sliderButton.AutoButtonColor = false
sliderButton.ZIndex = 2
sliderButton.Parent = sliderContainer

local sliderCorner3 = Instance.new("UICorner")
sliderCorner3.CornerRadius = UDim.new(1, 0)
sliderCorner3.Parent = sliderButton

-- Prediction Slider
local predictionLabel = Instance.new("TextLabel")
predictionLabel.Text = "PREDICTION: "..string.format("%.2f", predictionAmount.X)
predictionLabel.Position = UDim2.new(0, 0, 0, 190)
predictionLabel.Size = UDim2.new(1, 0, 0, 20)
predictionLabel.Font = Enum.Font.Gotham
predictionLabel.TextSize = 13
predictionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
predictionLabel.BackgroundTransparency = 1
predictionLabel.TextXAlignment = Enum.TextXAlignment.Left
predictionLabel.Parent = frame

local predictionContainer = Instance.new("Frame")
predictionContainer.Size = UDim2.new(1, 0, 0, 24)
predictionContainer.Position = UDim2.new(0, 0, 0, 215)
predictionContainer.BackgroundTransparency = 1
predictionContainer.Parent = frame

local predictionTrack = Instance.new("Frame")
predictionTrack.Size = UDim2.new(1, 0, 0, 4)
predictionTrack.Position = UDim2.new(0, 0, 0.5, 0)
predictionTrack.AnchorPoint = Vector2.new(0, 0.5)
predictionTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
predictionTrack.Parent = predictionContainer

local predictionCorner = Instance.new("UICorner")
predictionCorner.CornerRadius = UDim.new(1, 0)
predictionCorner.Parent = predictionTrack

local predictionFill = Instance.new("Frame")
predictionFill.Size = UDim2.new(predictionAmount.X / 0.5, 0, 1, 0) -- Max prediction 0.5
predictionFill.BackgroundColor3 = Color3.fromRGB(255, 180, 80) -- Orange for prediction
predictionFill.Parent = predictionTrack

local predictionCorner2 = Instance.new("UICorner")
predictionCorner2.CornerRadius = UDim.new(1, 0)
predictionCorner2.Parent = predictionFill

local predictionButton = Instance.new("TextButton")
predictionButton.Size = UDim2.new(0, 16, 0, 16)
predictionButton.Position = UDim2.new(predictionAmount.X / 0.5, -8, 0.5, -8)
predictionButton.AnchorPoint = Vector2.new(0, 0.5)
predictionButton.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
predictionButton.Text = ""
predictionButton.AutoButtonColor = false
predictionButton.ZIndex = 2
predictionButton.Parent = predictionContainer

local predictionCorner3 = Instance.new("UICorner")
predictionCorner3.CornerRadius = UDim.new(1, 0)
predictionCorner3.Parent = predictionButton

-- Prediction Toggle
local predictionToggle = Instance.new("TextButton")
predictionToggle.Size = UDim2.new(1, 0, 0, 36)
predictionToggle.Position = UDim2.new(0, 0, 0, 250)
predictionToggle.Text = "PREDICTION: ON"
predictionToggle.Font = Enum.Font.GothamMedium
predictionToggle.TextSize = 14
predictionToggle.TextColor3 = Color3.fromRGB(240, 240, 240)
predictionToggle.BackgroundColor3 = Color3.fromRGB(50, 80, 60)
predictionToggle.AutoButtonColor = false
predictionToggle.Parent = frame

local predictionToggleCorner = Instance.new("UICorner")
predictionToggleCorner.CornerRadius = UDim.new(0, 8)
predictionToggleCorner.Parent = predictionToggle

predictionToggle.MouseButton1Click:Connect(function()
    predictionEnabled = not predictionEnabled
    predictionToggle.Text = "PREDICTION: "..(predictionEnabled and "ON" or "OFF")
    predictionToggle.BackgroundColor3 = predictionEnabled and Color3.fromRGB(50, 80, 60) or Color3.fromRGB(80, 50, 50)
end)

-- Keybind Control
local keybindLabel = Instance.new("TextLabel")
keybindLabel.Text = "KEYBIND: Q"
keybindLabel.Position = UDim2.new(0, 0, 0, 295)
keybindLabel.Size = UDim2.new(1, 0, 0, 20)
keybindLabel.Font = Enum.Font.Gotham
keybindLabel.TextSize = 13
keybindLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
keybindLabel.BackgroundTransparency = 1
keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
keybindLabel.Parent = frame

local keyBtn = Instance.new("TextButton")
keyBtn.Size = UDim2.new(1, 0, 0, 36)
keyBtn.Position = UDim2.new(0, 0, 0, 320)
keyBtn.Text = "CHANGE KEYBIND"
keyBtn.Font = Enum.Font.GothamMedium
keyBtn.TextSize = 14
keyBtn.TextColor3 = Color3.fromRGB(240, 240, 240)
keyBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
keyBtn.AutoButtonColor = false
keyBtn.Parent = frame

local keyBtnCorner = Instance.new("UICorner")
keyBtnCorner.CornerRadius = UDim.new(0, 8)
keyBtnCorner.Parent = keyBtn

-- Status Indicator
local statusContainer = Instance.new("Frame")
statusContainer.Size = UDim2.new(1, 0, 0, 24)
statusContainer.Position = UDim2.new(0, 0, 0, 365)
statusContainer.BackgroundTransparency = 1
statusContainer.Parent = frame

local statusDot = Instance.new("Frame")
statusDot.Size = UDim2.new(0, 10, 0, 10)
statusDot.Position = UDim2.new(0, 0, 0.5, -5)
statusDot.AnchorPoint = Vector2.new(0, 0.5)
statusDot.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
statusDot.Parent = statusContainer

local statusCorner = Instance.new("UICorner")
statusCorner.CornerRadius = UDim.new(1, 0)
statusCorner.Parent = statusDot

local statusText = Instance.new("TextLabel")
statusText.Text = "INACTIVE"
statusText.Size = UDim2.new(1, -20, 1, 0)
statusText.Position = UDim2.new(0, 20, 0, 0)
statusText.Font = Enum.Font.Gotham
statusText.TextSize = 13
statusText.TextColor3 = Color3.fromRGB(200, 200, 200)
statusText.BackgroundTransparency = 1
statusText.TextXAlignment = Enum.TextXAlignment.Left
statusText.Parent = statusContainer

-- Highlight
local highlight = Instance.new("Highlight")
highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
highlight.FillColor = Color3.fromRGB(100, 150, 255)
highlight.OutlineColor = Color3.new(0, 0, 0)
highlight.FillTransparency = 0.8
highlight.OutlineTransparency = 0.3
highlight.Parent = gui

-- FUNCTIONS
local function getClosestPlayerToCrosshair()
    local myChar = localPlayer.Character
    if not myChar or not myChar:FindFirstChild("HumanoidRootPart") then return end
    
    local cameraPos = camera.CFrame.Position
    local cameraLook = camera.CFrame.LookVector
    
    local closestPlayer = nil
    local smallestAngle = maxLockAngle
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local toPlayer = (hrp.Position - cameraPos).Unit
                local angle = math.acos(cameraLook:Dot(toPlayer))
                
                if angle < smallestAngle then
                    smallestAngle = angle
                    closestPlayer = player
                end
            end
        end
    end
    
    return closestPlayer
end

local function updateStatus()
    if not camLockEnabled then
        statusDot.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
        statusText.Text = "INACTIVE"
    else
        if targetPlayer then
            statusDot.BackgroundColor3 = Color3.fromRGB(50, 255, 50)
            statusText.Text = "LOCKED: "..string.sub(targetPlayer.Name, 1, 12)
        else
            statusDot.BackgroundColor3 = Color3.fromRGB(255, 255, 50)
            statusText.Text = "NO TARGET"
        end
    end
end

local function toggleCamlock()
    camLockEnabled = not camLockEnabled
    
    if camLockEnabled then
        targetPlayer = getClosestPlayerToCrosshair()
        highlight.Adornee = targetPlayer and targetPlayer.Character or nil
        toggleBtn.Text = "CAMLOCK: ON"
    else
        targetPlayer = nil
        highlight.Adornee = nil
        toggleBtn.Text = "CAMLOCK: OFF"
    end
    
    updateStatus()
end

-- CONNECTIONS
toggleBtn.MouseButton1Click:Connect(toggleCamlock)

keyBtn.MouseButton1Click:Connect(function()
    waitingForKey = true
    keyBtn.Text = "PRESS A KEY..."
end)

UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    
    if waitingForKey and input.KeyCode ~= Enum.KeyCode.Unknown then
        camLockKey = input.KeyCode
        keybindLabel.Text = "KEYBIND: "..camLockKey.Name
        keyBtn.Text = "CHANGE KEYBIND"
        waitingForKey = false
    elseif input.KeyCode == camLockKey then
        toggleCamlock()
    end
end)

-- Smoothness slider
local sliderDragging = false
sliderButton.MouseButton1Down:Connect(function()
    sliderDragging = true
end)

-- Prediction slider
local predictionDragging = false
predictionButton.MouseButton1Down:Connect(function()
    predictionDragging = true
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        sliderDragging = false
        predictionDragging = false
    end
end)

-- Main camlock loop
local renderSteppedConnection
renderSteppedConnection = RunService.RenderStepped:Connect(function(deltaTime)
    -- Handle slider dragging
    if sliderDragging then
        local mouse = UserInputService:GetMouseLocation().X
        local sliderPos = sliderTrack.AbsolutePosition.X
        local sliderSize = sliderTrack.AbsoluteSize.X
        local percent = math.clamp((mouse - sliderPos) / sliderSize, 0, 1)
        
        smoothness = percent
        sliderFill.Size = UDim2.new(smoothness, 0, 1, 0)
        sliderButton.Position = UDim2.new(smoothness, -8, 0.5, -8)
        smoothLabel.Text = "SMOOTHNESS: "..string.format("%.2f", smoothness)
    end
    
    -- Handle prediction slider dragging
    if predictionDragging then
        local mouse = UserInputService:GetMouseLocation().X
        local sliderPos = predictionTrack.AbsolutePosition.X
        local sliderSize = predictionTrack.AbsoluteSize.X
        local percent = math.clamp((mouse - sliderPos) / sliderSize, 0, 1)
        
        predictionAmount = Vector3.new(percent * 0.5, 0, percent * 0.5) -- Max prediction 0.5
        predictionFill.Size = UDim2.new(percent, 0, 1, 0)
        predictionButton.Position = UDim2.new(percent, -8, 0.5, -8)
        predictionLabel.Text = "PREDICTION: "..string.format("%.2f", predictionAmount.X)
    end
    
    -- Handle camlock
    if camLockEnabled then
        -- Get new target if needed
        if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            targetPlayer = getClosestPlayerToCrosshair()
            highlight.Adornee = targetPlayer and targetPlayer.Character or nil
            updateStatus()
        end
        
        -- Smooth camera movement
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = targetPlayer.Character.HumanoidRootPart
            local predictedPos = predictionEnabled and (hrp.Position + (hrp.Velocity * predictionAmount)) or hrp.Position
            local camPos = camera.CFrame.Position
            local lookDir = (predictedPos - camPos).Unit
            
            -- Smooth interpolation
            local currentLook = camera.CFrame.LookVector
            local newLook = currentLook:Lerp(lookDir, smoothness * deltaTime * 60)
            
            camera.CFrame = CFrame.new(camPos, camPos + newLook)
        else
            -- Target became invalid
            targetPlayer = nil
            highlight.Adornee = nil
            updateStatus()
        end
    end
end)

-- Cleanup
gui.Destroying:Connect(function()
    if renderSteppedConnection then
        renderSteppedConnection:Disconnect()
    end
end)
