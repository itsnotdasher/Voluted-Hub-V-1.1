local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = "Mal-Ware Hub | V1.0",
	Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
	LoadingTitle = "Mal-Ware Hub is loading...",
	LoadingSubtitle = "by itsnotdasher",
	Theme = "Ocean", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
	DisableRayfieldPrompts = false,
	DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
	ConfigurationSaving = {
	   Enabled = true,
	   FolderName = nil, -- Create a custom folder for your hub/game
	   FileName = "Big Hub"
	},
 
	Discord = {
	   Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
	   Invite = "https://discord.gg/GHU6bBE9", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
	   RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},
 
	KeySystem = true, -- Set this to true to use our key system
	KeySettings = {
	   Title = "Mal-ware KeySystem - 2025",
	   Subtitle = "Key System",
	   Note = "Join Discord server for the key", -- Use this to tell the user how to get a key
	   FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
	   SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
	   GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
	   Key = {"Malware-Key2025-A6B6D8ANV8X9S7FG8392FJDNS8CHRNN29"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
 })

 --- key system ui


 --- Tabs


 local PlayerTab = Window:CreateTab("Main Section", 279461711) -- Title, Image

 local Section = PlayerTab:CreateSection("Main Tab")

--- Main tab - walkspeed slider

local Slider = PlayerTab:CreateSlider({
    Name = "Walkspeed Slider",  -- Change name to reflect the purpose
    Range = {0, 500},           -- Set range for WalkSpeed (can be adjusted as needed)
    Increment = 1,              -- Increment to modify WalkSpeed by 1 at a time
    Suffix = "Speed",           -- This suffix can indicate the unit (speed in this case)
    CurrentValue = 16,          -- Default value for the WalkSpeed, you can change this
    Flag = "WalkspeedSlider",   -- Flag for configuration saving
    Callback = function(Value)
        -- Set the player's WalkSpeed based on the slider value
        local player = game.Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value  -- Set the WalkSpeed to the slider value
        end
    end,
})


--- Main tab - Fly slider

local flying = false  
local bodyVelocity, bodyGyro
local speed = 1  
local maxSpeed = 10000  
local activeInputs = {}

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end
    activeInputs[input.KeyCode] = true
end

local function onInputEnded(input, gameProcessed)
    activeInputs[input.KeyCode] = nil
end

local function startFlying()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    local camera = game.Workspace.CurrentCamera  

    if not humanoid or not rootPart or flying then return end

    flying = true
    humanoid.PlatformStand = true  

    bodyVelocity = Instance.new("BodyVelocity")
    bodyGyro = Instance.new("BodyGyro")

    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)  
    bodyVelocity.Velocity = Vector3.zero
    bodyVelocity.Parent = rootPart

    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)  
    bodyGyro.CFrame = rootPart.CFrame  
    bodyGyro.Parent = rootPart

    UserInputService.InputBegan:Connect(onInputBegan)
    UserInputService.InputEnded:Connect(onInputEnded)

    local verticalSpeed = 0  
    local movementLoop
    movementLoop = RunService.RenderStepped:Connect(function(deltaTime)
        if not flying then
            movementLoop:Disconnect()
            return
        end

        local lookDirection = camera.CFrame.LookVector
        local rightDirection = camera.CFrame.RightVector
        local moveDirection = Vector3.zero

        -- Horizontal movement (WASD keys)
        if activeInputs[Enum.KeyCode.W] then moveDirection += lookDirection end
        if activeInputs[Enum.KeyCode.S] then moveDirection -= lookDirection end
        if activeInputs[Enum.KeyCode.A] then moveDirection -= rightDirection end
        if activeInputs[Enum.KeyCode.D] then moveDirection += rightDirection end

        -- ðŸŽ¥ **Camera-Based Vertical Control**
        local deadzone = 0.3  -- Increased deadzone to ignore small camera movements
        local lookUpDown = lookDirection.Y  

        if math.abs(lookUpDown) > deadzone then
            local targetVerticalSpeed = lookUpDown * speed * 0.5
            verticalSpeed = verticalSpeed + (targetVerticalSpeed - verticalSpeed) * (deltaTime * 4)
        else
            verticalSpeed = verticalSpeed * 0.85  -- Gradual stabilization when not looking up/down
        end

        -- Manual vertical control with Q/E keys
        if activeInputs[Enum.KeyCode.Q] then
            verticalSpeed = verticalSpeed + speed * 0.2  -- Move up when pressing Q
        end
        if activeInputs[Enum.KeyCode.E] then
            verticalSpeed = verticalSpeed - speed * 0.2  -- Move down when pressing E
        end

        local targetVelocity = moveDirection.Unit * speed
        if moveDirection.Magnitude == 0 then
            targetVelocity = Vector3.zero
        end

        bodyVelocity.Velocity = Vector3.new(targetVelocity.X, verticalSpeed, targetVelocity.Z)
        bodyGyro.CFrame = camera.CFrame  
    end)
end

local function stopFlying()
    if not flying then return end
    flying = false

    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end

    if bodyVelocity then bodyVelocity:Destroy() end
    if bodyGyro then bodyGyro:Destroy() end

    activeInputs = {}  
end

-- ðŸ”¹ **Slider to Control Fly Speed & Toggle Flight**
local Slider = PlayerTab:CreateSlider({
    Name = "Fly [Max Speed 500]",  
    Range = {0, 500},  
    Increment = 1,  
    Suffix = " Speed",  
    CurrentValue = 1,  
    Flag = "FlySpeedSlider",  
    Callback = function(Value)
        speed = Value
        if Value > 1 then
            startFlying()  -- Enable flight if speed is above 1
        else
            stopFlying()   -- Disable flight if speed is 1 or lower
        end
    end,
})

--- jump power slider

local Slider = PlayerTab:CreateSlider({
    Name = "JumpPower [Max Speed 500]",  -- Change name to reflect the purpose
    Range = {0, 500},           -- Set range for WalkSpeed (can be adjusted as needed)
    Increment = 1,              -- Increment to modify WalkSpeed by 1 at a time
    Suffix = "Jump",           -- This suffix can indicate the unit (speed in this case)
    CurrentValue = 16,          -- Default value for the WalkSpeed, you can change this
    Flag = "JumpPowerSlider",   -- Flag for configuration saving
    Callback = function(Value)
        -- Set the player's WalkSpeed based on the slider value
        local player = game.Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.JumpPower = Value  -- Set the WalkSpeed to the slider value
        end
    end,
})


--- tab 2

local Player2Tab = Window:CreateTab("Auto Section", 279461711) -- Title, Image

local Section = Player2Tab:CreateSection("Auto Tab")

--- auto clicker
local Toggle = Player2Tab:CreateToggle({
	Name = "Full Auto Fishing [Soon]",
	CurrentValue = false,
	Flag = "FAF", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
	-- The function that takes place when the toggle is pressed
	-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
 })



 ---- dont touch

Rayfield:LoadConfiguration()

--- dont touch
